#############################################################################
# Makefile for building: encoder
# Generated by qmake (2.01a) (Qt 4.8.1) on: Mon Apr 9 18:28:08 2012
# Project:  encoder.pro
# Template: app
# Command: /usr/bin/qmake -o Makefile encoder.pro
#############################################################################

####### Compiler, tools and options

CC            = gcc
CXX           = g++
DEFINES       = -DQT_NO_DEBUG -DQT_GUI_LIB -DQT_CORE_LIB -DQT_SHARED
CFLAGS        = -pipe -march=i686 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -Wall -W -D_REENTRANT $(DEFINES)
CXXFLAGS      = -pipe -march=i686 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -D_FORTIFY_SOURCE=2 -Wall -W -D_REENTRANT $(DEFINES)
INCPATH       = -I/usr/share/qt/mkspecs/linux-g++ -I. -I/usr/include/QtCore -I/usr/include/QtGui -I/usr/include -I. -I.
LINK          = g++
LFLAGS        = -Wl,-O1,--sort-common,--as-needed,-z,relro,--hash-style=gnu -Wl,-O1
LIBS          = $(SUBLIBS)  -L/usr/lib -lQtGui -lQtCore -lpthread 
AR            = ar cqs
RANLIB        = 
QMAKE         = /usr/bin/qmake
TAR           = tar -cf
COMPRESS      = gzip -9f
COPY          = cp -f
SED           = sed
COPY_FILE     = $(COPY)
COPY_DIR      = $(COPY) -r
STRIP         = strip
INSTALL_FILE  = install -m 644 -p
INSTALL_DIR   = $(COPY_DIR)
INSTALL_PROGRAM = install -m 755 -p
DEL_FILE      = rm -f
SYMLINK       = ln -f -s
DEL_DIR       = rmdir
MOVE          = mv -f
CHK_DIR_EXISTS= test -d
MKDIR         = mkdir -p

####### Output directory

OBJECTS_DIR   = ./

####### Files

SOURCES       = anaFilter.c \
		constants.c \
		createCB.c \
		doCPLC.c \
		enhancer.c \
		filter.c \
		FrameClassify.c \
		gainquant.c \
		getCBvec.c \
		helpfun.c \
		hpInput.c \
		hpOutput.c \
		iCBConstruct.c \
		iCBSearch.c \
		iLBC_decode.c \
		iLBC_encode.c \
		LPCdecode.c \
		LPCencode.c \
		lsf.c \
		main.c \
		packing.c \
		StateConstructW.c \
		StateSearchW.c \
		syntFilter.c 
OBJECTS       = anaFilter.o \
		constants.o \
		createCB.o \
		doCPLC.o \
		enhancer.o \
		filter.o \
		FrameClassify.o \
		gainquant.o \
		getCBvec.o \
		helpfun.o \
		hpInput.o \
		hpOutput.o \
		iCBConstruct.o \
		iCBSearch.o \
		iLBC_decode.o \
		iLBC_encode.o \
		LPCdecode.o \
		LPCencode.o \
		lsf.o \
		main.o \
		packing.o \
		StateConstructW.o \
		StateSearchW.o \
		syntFilter.o
DIST          = /usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/common/gcc-base.conf \
		/usr/share/qt/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt/mkspecs/common/g++-base.conf \
		/usr/share/qt/mkspecs/common/g++-unix.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		/usr/share/qt/mkspecs/features/include_source_dir.prf \
		encoder.pro
QMAKE_TARGET  = encoder
DESTDIR       = 
TARGET        = encoder

first: all
####### Implicit rules

.SUFFIXES: .o .c .cpp .cc .cxx .C

.cpp.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cc.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.cxx.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.C.o:
	$(CXX) -c $(CXXFLAGS) $(INCPATH) -o "$@" "$<"

.c.o:
	$(CC) -c $(CFLAGS) $(INCPATH) -o "$@" "$<"

####### Build rules

all: Makefile $(TARGET)

$(TARGET):  $(OBJECTS)  
	$(LINK) $(LFLAGS) -o $(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)

Makefile: encoder.pro  /usr/share/qt/mkspecs/linux-g++/qmake.conf /usr/share/qt/mkspecs/common/unix.conf \
		/usr/share/qt/mkspecs/common/linux.conf \
		/usr/share/qt/mkspecs/common/gcc-base.conf \
		/usr/share/qt/mkspecs/common/gcc-base-unix.conf \
		/usr/share/qt/mkspecs/common/g++-base.conf \
		/usr/share/qt/mkspecs/common/g++-unix.conf \
		/usr/share/qt/mkspecs/qconfig.pri \
		/usr/share/qt/mkspecs/modules/qt_phonon.pri \
		/usr/share/qt/mkspecs/modules/qt_webkit_version.pri \
		/usr/share/qt/mkspecs/features/qt_functions.prf \
		/usr/share/qt/mkspecs/features/qt_config.prf \
		/usr/share/qt/mkspecs/features/exclusive_builds.prf \
		/usr/share/qt/mkspecs/features/default_pre.prf \
		/usr/share/qt/mkspecs/features/release.prf \
		/usr/share/qt/mkspecs/features/default_post.prf \
		/usr/share/qt/mkspecs/features/unix/gdb_dwarf_index.prf \
		/usr/share/qt/mkspecs/features/warn_on.prf \
		/usr/share/qt/mkspecs/features/qt.prf \
		/usr/share/qt/mkspecs/features/unix/thread.prf \
		/usr/share/qt/mkspecs/features/moc.prf \
		/usr/share/qt/mkspecs/features/resources.prf \
		/usr/share/qt/mkspecs/features/uic.prf \
		/usr/share/qt/mkspecs/features/yacc.prf \
		/usr/share/qt/mkspecs/features/lex.prf \
		/usr/share/qt/mkspecs/features/include_source_dir.prf \
		/usr/lib/libQtGui.prl \
		/usr/lib/libQtCore.prl
	$(QMAKE) -o Makefile encoder.pro
/usr/share/qt/mkspecs/common/unix.conf:
/usr/share/qt/mkspecs/common/linux.conf:
/usr/share/qt/mkspecs/common/gcc-base.conf:
/usr/share/qt/mkspecs/common/gcc-base-unix.conf:
/usr/share/qt/mkspecs/common/g++-base.conf:
/usr/share/qt/mkspecs/common/g++-unix.conf:
/usr/share/qt/mkspecs/qconfig.pri:
/usr/share/qt/mkspecs/modules/qt_phonon.pri:
/usr/share/qt/mkspecs/modules/qt_webkit_version.pri:
/usr/share/qt/mkspecs/features/qt_functions.prf:
/usr/share/qt/mkspecs/features/qt_config.prf:
/usr/share/qt/mkspecs/features/exclusive_builds.prf:
/usr/share/qt/mkspecs/features/default_pre.prf:
/usr/share/qt/mkspecs/features/release.prf:
/usr/share/qt/mkspecs/features/default_post.prf:
/usr/share/qt/mkspecs/features/unix/gdb_dwarf_index.prf:
/usr/share/qt/mkspecs/features/warn_on.prf:
/usr/share/qt/mkspecs/features/qt.prf:
/usr/share/qt/mkspecs/features/unix/thread.prf:
/usr/share/qt/mkspecs/features/moc.prf:
/usr/share/qt/mkspecs/features/resources.prf:
/usr/share/qt/mkspecs/features/uic.prf:
/usr/share/qt/mkspecs/features/yacc.prf:
/usr/share/qt/mkspecs/features/lex.prf:
/usr/share/qt/mkspecs/features/include_source_dir.prf:
/usr/lib/libQtGui.prl:
/usr/lib/libQtCore.prl:
qmake:  FORCE
	@$(QMAKE) -o Makefile encoder.pro

dist: 
	@$(CHK_DIR_EXISTS) .tmp/encoder1.0.0 || $(MKDIR) .tmp/encoder1.0.0 
	$(COPY_FILE) --parents $(SOURCES) $(DIST) .tmp/encoder1.0.0/ && $(COPY_FILE) --parents anaFilter.h constants.h createCB.h doCPLC.h enhancer.h filter.h FrameClassify.h gainquant.h getCBvec.h helpfun.h hpInput.h hpOutput.h iCBConstruct.h iCBSearch.h iLBC_decode.h iLBC_define.h iLBC_encode.h LPCdecode.h LPCencode.h lsf.h packing.h StateConstructW.h StateSearchW.h syntFilter.h .tmp/encoder1.0.0/ && $(COPY_FILE) --parents anaFilter.c constants.c createCB.c doCPLC.c enhancer.c filter.c FrameClassify.c gainquant.c getCBvec.c helpfun.c hpInput.c hpOutput.c iCBConstruct.c iCBSearch.c iLBC_decode.c iLBC_encode.c LPCdecode.c LPCencode.c lsf.c main.c packing.c StateConstructW.c StateSearchW.c syntFilter.c .tmp/encoder1.0.0/ && (cd `dirname .tmp/encoder1.0.0` && $(TAR) encoder1.0.0.tar encoder1.0.0 && $(COMPRESS) encoder1.0.0.tar) && $(MOVE) `dirname .tmp/encoder1.0.0`/encoder1.0.0.tar.gz . && $(DEL_FILE) -r .tmp/encoder1.0.0


clean:compiler_clean 
	-$(DEL_FILE) $(OBJECTS)
	-$(DEL_FILE) *~ core *.core


####### Sub-libraries

distclean: clean
	-$(DEL_FILE) $(TARGET) 
	-$(DEL_FILE) Makefile


check: first

mocclean: compiler_moc_header_clean compiler_moc_source_clean

mocables: compiler_moc_header_make_all compiler_moc_source_make_all

compiler_moc_header_make_all:
compiler_moc_header_clean:
compiler_rcc_make_all:
compiler_rcc_clean:
compiler_image_collection_make_all: qmake_image_collection.cpp
compiler_image_collection_clean:
	-$(DEL_FILE) qmake_image_collection.cpp
compiler_moc_source_make_all:
compiler_moc_source_clean:
compiler_uic_make_all:
compiler_uic_clean:
compiler_yacc_decl_make_all:
compiler_yacc_decl_clean:
compiler_yacc_impl_make_all:
compiler_yacc_impl_clean:
compiler_lex_make_all:
compiler_lex_clean:
compiler_clean: 

####### Compile

anaFilter.o: anaFilter.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o anaFilter.o anaFilter.c

constants.o: constants.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o constants.o constants.c

createCB.o: createCB.c iLBC_define.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o createCB.o createCB.c

doCPLC.o: doCPLC.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o doCPLC.o doCPLC.c

enhancer.o: enhancer.c iLBC_define.h \
		constants.h \
		filter.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o enhancer.o enhancer.c

filter.o: filter.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o filter.o filter.c

FrameClassify.o: FrameClassify.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o FrameClassify.o FrameClassify.c

gainquant.o: gainquant.c constants.h \
		iLBC_define.h \
		filter.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o gainquant.o gainquant.c

getCBvec.o: getCBvec.c iLBC_define.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o getCBvec.o getCBvec.c

helpfun.o: helpfun.c iLBC_define.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o helpfun.o helpfun.c

hpInput.o: hpInput.c constants.h \
		iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hpInput.o hpInput.c

hpOutput.o: hpOutput.c constants.h \
		iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o hpOutput.o hpOutput.c

iCBConstruct.o: iCBConstruct.c iLBC_define.h \
		gainquant.h \
		getCBvec.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o iCBConstruct.o iCBConstruct.c

iCBSearch.o: iCBSearch.c iLBC_define.h \
		gainquant.h \
		createCB.h \
		filter.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o iCBSearch.o iCBSearch.c

iLBC_decode.o: iLBC_decode.c iLBC_define.h \
		StateConstructW.h \
		LPCdecode.h \
		iCBConstruct.h \
		doCPLC.h \
		helpfun.h \
		constants.h \
		packing.h \
		enhancer.h \
		hpOutput.h \
		syntFilter.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o iLBC_decode.o iLBC_decode.c

iLBC_encode.o: iLBC_encode.c iLBC_define.h \
		LPCencode.h \
		FrameClassify.h \
		StateSearchW.h \
		StateConstructW.h \
		helpfun.h \
		constants.h \
		packing.h \
		iCBSearch.h \
		iCBConstruct.h \
		hpInput.h \
		anaFilter.h \
		syntFilter.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o iLBC_encode.o iLBC_encode.c

LPCdecode.o: LPCdecode.c helpfun.h \
		lsf.h \
		iLBC_define.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o LPCdecode.o LPCdecode.c

LPCencode.o: LPCencode.c iLBC_define.h \
		helpfun.h \
		lsf.h \
		constants.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o LPCencode.o LPCencode.c

lsf.o: lsf.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o lsf.o lsf.c

main.o: main.c iLBC_define.h \
		iLBC_encode.h \
		iLBC_decode.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o main.o main.c

packing.o: packing.c iLBC_define.h \
		constants.h \
		helpfun.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o packing.o packing.c

StateConstructW.o: StateConstructW.c iLBC_define.h \
		constants.h \
		filter.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o StateConstructW.o StateConstructW.c

StateSearchW.o: StateSearchW.c iLBC_define.h \
		constants.h \
		filter.h \
		helpfun.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o StateSearchW.o StateSearchW.c

syntFilter.o: syntFilter.c iLBC_define.h
	$(CC) -c $(CFLAGS) $(INCPATH) -o syntFilter.o syntFilter.c

####### Install

install:   FORCE

uninstall:   FORCE

FORCE:

